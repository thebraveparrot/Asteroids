local GameState = require "main.gamestate"
local utils = require "main.utils"

go.property("type", hash("large")) --- Type of the asteroid (small or large)
go.property("turn_speed", 6)
go.property("velocity", vmath.vector3())

function init(self)
	-- When the ship exceeds this boundary, it is "wrapped" to the other side of the screen
	-- This is done by getting the diagonal length of the sprite using the pythagorean theorem
	local sprite_size = go.get("#sprite", "size")
	self.boundary_size = utils.diagonal_size_of_sprite(sprite_size)
end

local function wrap_if_out_of_bounds(self, pos, rotation)
	local w_width, w_height = window.get_size()
	if pos.x < -self.boundary_size then
		pos.x = w_width + (self.boundary_size + pos.x)
		go.set_position(pos)
	elseif pos.x > (w_width + self.boundary_size) then
		local oob_x = pos.x - (w_width + self.boundary_size)
		pos.x = oob_x - self.boundary_size
		go.set_position(pos)
	end

	if pos.y < -self.boundary_size then
		pos.y = w_height + (self.boundary_size + pos.y)
		go.set_position(pos)
	elseif pos.y > (w_height + self.boundary_size) then
		local oob_y = pos.y - (w_height + self.boundary_size)
		pos.y = oob_y - self.boundary_size
		go.set_position(pos)
	end
end

function update(self, dt)
	local rotation = go.get_rotation()
	rotation = rotation * vmath.quat_rotation_z(self.turn_speed * dt)
	go.set_rotation(rotation)
	
	local pos = go.get_position()
	go.set_position(pos+ (self.velocity * dt))

	wrap_if_out_of_bounds(self, pos, rotation)
end

local function explode(self)
	go.delete()
end

local function break_up_asteroid(self)
	local pos = go.get_position()
	local rot = go.get_rotation()

	local asteroid_1_vel = vmath.rotate(vmath.quat_rotation_z(math.pi / 4), self.velocity)
	local asteroid_1 = factory.create("#break_factory", pos + vmath.vector3(20, 20, 0), rot, { velocity = asteroid_1_vel, type = hash("small") })
	
	local asteroid_2_vel = vmath.rotate(vmath.quat_rotation_z(math.pi / -4), self.velocity)
	local asteroid_2 = factory.create("#break_factory", pos + vmath.vector3(20, 20, 0), rot, { velocity = asteroid_2_vel, type = hash("small") })

	GameState.active_asteroids[go.get_id()] = nil
	go.delete()
end

local function hit_by_bullet(self)
	if self.type == hash("large") then
		break_up_asteroid(self)
	else -- type is small
		explode(self)
	end
end

local function resolve_collision(self, message, sender)
	if message.other_group == hash("bullet") then
		hit_by_bullet(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		resolve_collision(self, message, sender)
	end
end