local GameState = require("main.gamestate")

--- The min/max speeds that an asteroid can have when spawned.
go.property("min_speed", 100)
go.property("max_speed", 200)

--- The min/max speed an asteroid can be spinning when it's spawned
go.property("min_turn_speed", 1)
go.property("max_turn_speed", 3)

--- Min/max intervals between spawning new asteroids
go.property("min_spawn_interval", 7)
go.property("max_spawn_interval", 12)

--- When calculating where to shoot a newly spawned asteroid, we will aim it randomly at a point less than this distance from the center.
go.property("aim_distance_from_center", 150)

local start_random_timer

--- For creating spawn points outside of the window.
local boundary_size = 25

local required_space_between_asteroids = 200

--- Returns a random point along a rectangle
-- Used for calculating where to place an asteroid along a perimeter.
-- @param width the width of the rectangle
-- @param height the height of the rectangle
local function random_point_on_rectangle(width, height)
	local random_side = math.random(0, 3)
	
	if random_side == 0 then
		return math.random(0, width), 0
	elseif random_side == 1 then
		return width, math.random(0, height)
	elseif random_side == 2 then
		return math.random(0, width), height
	else
		return 0, math.random(0, height)
	end
end

local function other_asteroid_within_radius_from(self, radius, from_x, from_y)
	local from_x_left = from_x - radius
	local from_x_right = from_x + radius
	local from_y_up = from_y + radius
	local from_y_down = from_y - radius
	for asteroid, _ in ipairs(GameState.active_asteroids) do
		local pos = go.get_position(asteroid)
		if pos.x >= from_x_left and pos.x <= from_x_right
		and pos.y <= from_y_up and pos.y >= from_y_down then
			return false
		end
	end
end

local function get_random_location(self)
	local window_width, window_height = window.get_size()

	local rand_x, rand_y
	repeat
		rand_x, rand_y = random_point_on_rectangle(window_width + (boundary_size * 2), window_height + (boundary_size * 2))
	until not other_asteroid_within_radius_from(self, required_space_between_asteroids, rand_x, rand_y)
	
	return vmath.vector3(rand_x - boundary_size, rand_y - boundary_size, 0)
end

local function get_random_velocity(self, pos)
	local offset = vmath.vector3()
	offset.x = math.random(-self.aim_distance_from_center, self.aim_distance_from_center)
	offset.y = math.random(-self.aim_distance_from_center, self.aim_distance_from_center)
	local target = go.get_position("/ship") + offset
	
	local dir = vmath.normalize(target - pos)
	local d = #GameState.active_asteroids * 2
	return dir * math.random(10 + d, 100 + d)
end

local function spawn_new_asteroid(self)
	-- delete_old_ones(self)
	local pos = get_random_location(self)
	local vel = get_random_velocity(self, pos)
	print("Creating asteroid at position ", pos, " with angle ", angle)
	local new_asteroid = factory.create("factory#factory", pos, vmath.quat_rotation_z(0), { velocity = vel })

	GameState.active_asteroids[new_asteroid] = true

	-- Set timer for next spawn event
	start_random_timer(self)
end

start_random_timer = function(self)
	local delay = math.random(self.min_spawn_interval, self.max_spawn_interval)
	timer.delay(delay, false, function(self) spawn_new_asteroid(self) end)
end

function init(self)
	local rand_seed = os.time()
	print("Seeding random with OS time ", rand_seed)
	math.randomseed(rand_seed)
	start_random_timer(self)
end
